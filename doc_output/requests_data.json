{
  "https://requests.readthedocs.io/en/latest/": {
    "url": "https://requests.readthedocs.io/en/latest/",
    "title": "Requests: HTTP for Humans\u2122 \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Requests: HTTP for Humans\u2122\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Beloved Features\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The User Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Community Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The API Documentation / Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Contributor Guide\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      }
    ],
    "toc": [],
    "content": "Requests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRelease v2.32.3. (Installation)\n\nRequestsis an elegant and simple HTTP library for Python, built for human beings.\n\nBehold, the power of Requests:\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\nSeesimilar code, sans Requests.\n\nRequestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.\n\nBeloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.\n\nRequests is ready for today\u2019s web.\n\nKeep-Alive & Connection Pooling\n\nInternational Domains and URLs\n\nSessions with Cookie Persistence\n\nBrowser-style SSL Verification\n\nAutomatic Content Decoding\n\nBasic/Digest Authentication\n\nElegant Key/Value Cookies\n\nAutomatic Decompression\n\nUnicode Response Bodies\n\nHTTP(S) Proxy Support\n\nMultipart File Uploads\n\nStreaming Downloads\n\nConnection Timeouts\n\nChunked Requests\n\n.netrcSupport\n\nRequests officially supports Python 3.8+, and runs great on PyPy.\n\nThe User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThis part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.\n\nInstallation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease History\n\nThis part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.\n\nRecommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoning\n\nCommunity UpdatesRelease History\n\nThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nIf you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.\n\nDeveloper InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nIf you want to contribute to the project, this part of the documentation is for\nyou.\n\nContributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and Suggestions\n\nThere are no more guides. You are now guideless.\nGood luck.\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/#requests-http-for-humans": {
    "url": "https://requests.readthedocs.io/en/latest/#requests-http-for-humans",
    "title": "Requests: HTTP for Humans\u2122 \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Requests: HTTP for Humans\u2122\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Beloved Features\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The User Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Community Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The API Documentation / Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Contributor Guide\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      }
    ],
    "toc": [],
    "content": "Requests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRelease v2.32.3. (Installation)\n\nRequestsis an elegant and simple HTTP library for Python, built for human beings.\n\nBehold, the power of Requests:\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\nSeesimilar code, sans Requests.\n\nRequestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.\n\nBeloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.\n\nRequests is ready for today\u2019s web.\n\nKeep-Alive & Connection Pooling\n\nInternational Domains and URLs\n\nSessions with Cookie Persistence\n\nBrowser-style SSL Verification\n\nAutomatic Content Decoding\n\nBasic/Digest Authentication\n\nElegant Key/Value Cookies\n\nAutomatic Decompression\n\nUnicode Response Bodies\n\nHTTP(S) Proxy Support\n\nMultipart File Uploads\n\nStreaming Downloads\n\nConnection Timeouts\n\nChunked Requests\n\n.netrcSupport\n\nRequests officially supports Python 3.8+, and runs great on PyPy.\n\nThe User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThis part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.\n\nInstallation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease History\n\nThis part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.\n\nRecommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoning\n\nCommunity UpdatesRelease History\n\nThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nIf you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.\n\nDeveloper InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nIf you want to contribute to the project, this part of the documentation is for\nyou.\n\nContributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and Suggestions\n\nThere are no more guides. You are now guideless.\nGood luck.\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/user/install/#install": {
    "url": "https://requests.readthedocs.io/en/latest/user/install/#install",
    "title": "Installation of Requests \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Installation of Requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "$ python -m pip install requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Get the Source Code\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Table of Contents",
        "id": ""
      },
      {
        "level": 3,
        "text": "Related Topics",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      },
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      }
    ],
    "toc": [],
    "content": "Installation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nThis part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.\n\n$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requests\n\nTo install Requests, simply run this simple command in your terminal of choice:\n\n$ python -m pip install requests\n\n$ python -m pip install requests\n\nGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nRequests is actively developed on GitHub, where the code isalways available.\n\nYou can either clone the public repository:\n\n$ git clone https://github.com/psf/requests.git\n\n$ git clone https://github.com/psf/requests.git\n\nOr, download thetarball:\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\nOnce you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:\n\n$ cd requests\n$ python -m pip install .\n\n$ cd requests\n$ python -m pip install .\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.\n\nTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source Code\n\nRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:Quickstart\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/#beloved-features": {
    "url": "https://requests.readthedocs.io/en/latest/#beloved-features",
    "title": "Requests: HTTP for Humans\u2122 \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Requests: HTTP for Humans\u2122\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Beloved Features\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The User Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Community Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The API Documentation / Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Contributor Guide\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      }
    ],
    "toc": [],
    "content": "Requests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRelease v2.32.3. (Installation)\n\nRequestsis an elegant and simple HTTP library for Python, built for human beings.\n\nBehold, the power of Requests:\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\nSeesimilar code, sans Requests.\n\nRequestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.\n\nBeloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.\n\nRequests is ready for today\u2019s web.\n\nKeep-Alive & Connection Pooling\n\nInternational Domains and URLs\n\nSessions with Cookie Persistence\n\nBrowser-style SSL Verification\n\nAutomatic Content Decoding\n\nBasic/Digest Authentication\n\nElegant Key/Value Cookies\n\nAutomatic Decompression\n\nUnicode Response Bodies\n\nHTTP(S) Proxy Support\n\nMultipart File Uploads\n\nStreaming Downloads\n\nConnection Timeouts\n\nChunked Requests\n\n.netrcSupport\n\nRequests officially supports Python 3.8+, and runs great on PyPy.\n\nThe User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThis part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.\n\nInstallation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease History\n\nThis part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.\n\nRecommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoning\n\nCommunity UpdatesRelease History\n\nThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nIf you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.\n\nDeveloper InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nIf you want to contribute to the project, this part of the documentation is for\nyou.\n\nContributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and Suggestions\n\nThere are no more guides. You are now guideless.\nGood luck.\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/#the-user-guide": {
    "url": "https://requests.readthedocs.io/en/latest/#the-user-guide",
    "title": "Requests: HTTP for Humans\u2122 \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Requests: HTTP for Humans\u2122\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Beloved Features\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The User Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Community Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The API Documentation / Guide\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "The Contributor Guide\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}"
      }
    ],
    "toc": [],
    "content": "Requests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRequests: HTTP for Humans\u2122\u00b6Release v2.32.3. (Installation)Requestsis an elegant and simple HTTP library for Python, built for human beings.Behold, the power of Requests:>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}Seesimilar code, sans Requests.Requestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.Beloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.The User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of AuthenticationThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease HistoryThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.xThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nRelease v2.32.3. (Installation)\n\nRequestsis an elegant and simple HTTP library for Python, built for human beings.\n\nBehold, the power of Requests:\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\n>>>r=requests.get('https://api.github.com/user',auth=('user','pass'))>>>r.status_code200>>>r.headers['content-type']'application/json; charset=utf8'>>>r.encoding'utf-8'>>>r.text'{\"type\":\"User\"...'>>>r.json(){'private_gists': 419, 'total_private_repos': 77, ...}\n\nSeesimilar code, sans Requests.\n\nRequestsallows you to send HTTP/1.1 requests extremely easily.\nThere\u2019s no need to manually add query strings to your\nURLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling\nare 100% automatic, thanks tourllib3.\n\nBeloved Features\u00b6Requests is ready for today\u2019s web.Keep-Alive & Connection PoolingInternational Domains and URLsSessions with Cookie PersistenceBrowser-style SSL VerificationAutomatic Content DecodingBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesHTTP(S) Proxy SupportMultipart File UploadsStreaming DownloadsConnection TimeoutsChunked Requests.netrcSupportRequests officially supports Python 3.8+, and runs great on PyPy.\n\nRequests is ready for today\u2019s web.\n\nKeep-Alive & Connection Pooling\n\nInternational Domains and URLs\n\nSessions with Cookie Persistence\n\nBrowser-style SSL Verification\n\nAutomatic Content Decoding\n\nBasic/Digest Authentication\n\nElegant Key/Value Cookies\n\nAutomatic Decompression\n\nUnicode Response Bodies\n\nHTTP(S) Proxy Support\n\nMultipart File Uploads\n\nStreaming Downloads\n\nConnection Timeouts\n\nChunked Requests\n\n.netrcSupport\n\nRequests officially supports Python 3.8+, and runs great on PyPy.\n\nThe User Guide\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.Installation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThis part of the documentation, which is mostly prose, begins with some\nbackground information about Requests, then focuses on step-by-step\ninstructions for getting the most out of Requests.\n\nInstallation of Requests$ python -m pip install requestsGet the Source CodeQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsAdvanced UsageSession ObjectsRequest and Response ObjectsPrepared RequestsSSL Cert VerificationClient Side CertificatesCA CertificatesBody Content WorkflowKeep-AliveStreaming UploadsChunk-Encoded RequestsPOST Multiple Multipart-Encoded FilesEvent HooksCustom AuthenticationStreaming RequestsProxiesComplianceHTTP VerbsCustom VerbsLink HeadersTransport AdaptersBlocking Or Non-Blocking?Header OrderingTimeoutsAuthenticationBasic AuthenticationDigest AuthenticationOAuth 1 AuthenticationOAuth 2 and OpenID Connect AuthenticationOther AuthenticationNew Forms of Authentication\n\nThe Community Guide\u00b6This part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.Recommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoningCommunity UpdatesRelease History\n\nThis part of the documentation, which is mostly prose, details the\nRequests ecosystem and community.\n\nRecommended Packages and ExtensionsCertifi CA BundleCacheControlRequests-ToolbeltRequests-ThreadsRequests-OAuthlibBetamaxFrequently Asked QuestionsEncoded Data?Custom User-Agents?Why not Httplib2?Python 3 Support?Python 2 Support?What are \u201chostname doesn\u2019t match\u201d errors?IntegrationsArticles & TalksSupportStack OverflowFile an IssueSend a TweetVulnerability DisclosureRelease Process and RulesMajor ReleasesMinor ReleasesHotfix ReleasesReasoning\n\nCommunity UpdatesRelease History\n\nThe API Documentation / Guide\u00b6If you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.Developer InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nIf you are looking for information on a specific function, class, or method,\nthis part of the documentation is for you.\n\nDeveloper InterfaceMain InterfaceExceptionsRequest SessionsLower-Level ClassesLower-Lower-Level ClassesAuthenticationEncodingsCookiesStatus Code LookupMigrating to 1.xMigrating to 2.x\n\nThe Contributor Guide\u00b6If you want to contribute to the project, this part of the documentation is for\nyou.Contributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and SuggestionsThere are no more guides. You are now guideless.\nGood luck.\n\nIf you want to contribute to the project, this part of the documentation is for\nyou.\n\nContributor\u2019s GuideBe CordialGet Early FeedbackContribution SuitabilityCode ContributionsSteps for Submitting CodeCode ReviewCode StyleNew ContributorsDocumentation ContributionsBug ReportsFeature RequestsAuthorsKeepers of the CrystalsPrevious Keepers of CrystalsPatches and Suggestions\n\nThere are no more guides. You are now guideless.\nGood luck.\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings.\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/user/install/": {
    "url": "https://requests.readthedocs.io/en/latest/user/install/",
    "title": "Installation of Requests \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Installation of Requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "$ python -m pip install requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Get the Source Code\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Table of Contents",
        "id": ""
      },
      {
        "level": 3,
        "text": "Related Topics",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      },
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      }
    ],
    "toc": [],
    "content": "Installation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nThis part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.\n\n$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requests\n\nTo install Requests, simply run this simple command in your terminal of choice:\n\n$ python -m pip install requests\n\n$ python -m pip install requests\n\nGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nRequests is actively developed on GitHub, where the code isalways available.\n\nYou can either clone the public repository:\n\n$ git clone https://github.com/psf/requests.git\n\n$ git clone https://github.com/psf/requests.git\n\nOr, download thetarball:\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\nOnce you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:\n\n$ cd requests\n$ python -m pip install .\n\n$ cd requests\n$ python -m pip install .\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.\n\nTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source Code\n\nRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:Quickstart\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/user/install/#python-m-pip-install-requests": {
    "url": "https://requests.readthedocs.io/en/latest/user/install/#python-m-pip-install-requests",
    "title": "Installation of Requests \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Installation of Requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "$ python -m pip install requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Get the Source Code\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Table of Contents",
        "id": ""
      },
      {
        "level": 3,
        "text": "Related Topics",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      },
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      }
    ],
    "toc": [],
    "content": "Installation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nThis part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.\n\n$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requests\n\nTo install Requests, simply run this simple command in your terminal of choice:\n\n$ python -m pip install requests\n\n$ python -m pip install requests\n\nGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nRequests is actively developed on GitHub, where the code isalways available.\n\nYou can either clone the public repository:\n\n$ git clone https://github.com/psf/requests.git\n\n$ git clone https://github.com/psf/requests.git\n\nOr, download thetarball:\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\nOnce you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:\n\n$ cd requests\n$ python -m pip install .\n\n$ cd requests\n$ python -m pip install .\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.\n\nTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source Code\n\nRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:Quickstart\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/user/install/#get-the-source-code": {
    "url": "https://requests.readthedocs.io/en/latest/user/install/#get-the-source-code",
    "title": "Installation of Requests \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Installation of Requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "$ python -m pip install requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Get the Source Code\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Table of Contents",
        "id": ""
      },
      {
        "level": 3,
        "text": "Related Topics",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      },
      {
        "language": "unknown",
        "content": "$ python -m pip install requests"
      },
      {
        "language": "unknown",
        "content": "$ git clone https://github.com/psf/requests.git"
      },
      {
        "language": "unknown",
        "content": "$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users)."
      },
      {
        "language": "unknown",
        "content": "$ cd requests\n$ python -m pip install ."
      }
    ],
    "toc": [],
    "content": "Installation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nInstallation of Requests\u00b6This part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requestsGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nThis part of the documentation covers the installation of Requests.\nThe first step to using any software package is getting it properly installed.\n\n$ python -m pip install requests\u00b6To install Requests, simply run this simple command in your terminal of choice:$ python -m pip install requests\n\nTo install Requests, simply run this simple command in your terminal of choice:\n\n$ python -m pip install requests\n\n$ python -m pip install requests\n\nGet the Source Code\u00b6Requests is actively developed on GitHub, where the code isalways available.You can either clone the public repository:$ git clone https://github.com/psf/requests.gitOr, download thetarball:$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).Once you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:$ cd requests\n$ python -m pip install .\n\nRequests is actively developed on GitHub, where the code isalways available.\n\nYou can either clone the public repository:\n\n$ git clone https://github.com/psf/requests.git\n\n$ git clone https://github.com/psf/requests.git\n\nOr, download thetarball:\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n\nOnce you have a copy of the source, you can embed it in your own Python\npackage, or install it into your site-packages easily:\n\n$ cd requests\n$ python -m pip install .\n\n$ cd requests\n$ python -m pip install .\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source CodeRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:QuickstartQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.\n\nTable of ContentsInstallation of Requests$ python -m pip install requestsGet the Source Code\n\nRelated TopicsDocumentation overviewPrevious:Requests: HTTP for Humans\u2122Next:Quickstart\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/user/quickstart/": {
    "url": "https://requests.readthedocs.io/en/latest/user/quickstart/",
    "title": "Quickstart \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Quickstart\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Make a Request\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Passing Parameters In URLs\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Binary Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "JSON Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Raw Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Custom Headers\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "More complicated POST requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "POST a Multipart-Encoded File\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Response Status Codes\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Response Headers\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Cookies\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Redirection and History\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Timeouts\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Errors and Exceptions\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Table of Contents",
        "id": ""
      },
      {
        "level": 3,
        "text": "Related Topics",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": ">>>importrequests"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events')"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post('https://httpbin.org/post',data={'key':'value'})"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'"
      },
      {
        "language": "unknown",
        "content": ">>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'"
      },
      {
        "language": "unknown",
        "content": "withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue"
      },
      {
        "language": "unknown",
        "content": ">>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post(url,json=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://httpbin.org/get')>>>r.status_code200"
      },
      {
        "language": "unknown",
        "content": ">>>r.status_code==requests.codes.okTrue"
      },
      {
        "language": "unknown",
        "content": ">>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error"
      },
      {
        "language": "unknown",
        "content": ">>>r.raise_for_status()None"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'"
      },
      {
        "language": "unknown",
        "content": ">>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events')"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post('https://httpbin.org/post',data={'key':'value'})"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'"
      },
      {
        "language": "unknown",
        "content": ">>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'"
      },
      {
        "language": "unknown",
        "content": "withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue"
      },
      {
        "language": "unknown",
        "content": ">>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post(url,json=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://httpbin.org/get')>>>r.status_code200"
      },
      {
        "language": "unknown",
        "content": ">>>r.status_code==requests.codes.okTrue"
      },
      {
        "language": "unknown",
        "content": ">>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error"
      },
      {
        "language": "unknown",
        "content": ">>>r.raise_for_status()None"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'"
      },
      {
        "language": "unknown",
        "content": ">>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)"
      }
    ],
    "toc": [],
    "content": "Quickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nQuickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nQuickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nQuickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nEager to get started? This page gives a good introduction in how to get started\nwith Requests.\n\nFirst, make sure that:\n\nRequests isinstalled\n\nRequests isup-to-date\n\nLet\u2019s get started with some simple examples.\n\nMake a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.\n\nMaking a request with Requests is very simple.\n\nBegin by importing the Requests module:\n\n>>>importrequests\n\n>>>importrequests\n\nNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:\n\n>>>r=requests.get('https://api.github.com/events')\n\n>>>r=requests.get('https://api.github.com/events')\n\nNow, we have aResponseobject calledr. We can\nget all the information we need from this object.\n\nRequests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:\n\n>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})\n\n>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})\n\nNice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:\n\n>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')\n\n>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')\n\nThat\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.\n\nPassing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3\n\nYou often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)\n\nYou can see that the URL has been correctly encoded by printing the URL:\n\n>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1\n\n>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1\n\nNote that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.\n\nYou can also pass a list of items as a value:\n\n>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3\n\n>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3\n\nResponse Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.\n\nWe can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\nRequests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.\n\nWhen you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:\n\n>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'\n\n>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'\n\nIf you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.\n\nRequests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.\n\nBinary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))\n\nYou can also access the response body as bytes, for non-text requests:\n\n>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\n>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\nThegzipanddeflatetransfer-encodings are automatically decoded for you.\n\nThebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.\n\nFor example, to create an image from binary data returned by a request, you can\nuse the following code:\n\n>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))\n\n>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))\n\nJSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.\n\nThere\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...\n\nIn case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.\n\nIt should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.\n\nRaw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.\n\nIn the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:\n\n>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'\n\n>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'\n\nIn general, however, you should use a pattern like this to save what is being\nstreamed to a file:\n\nwithopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)\n\nwithopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)\n\nUsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.\n\nNoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.\n\nNote\n\nAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.\n\nCustom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.\n\nIf you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.\n\nFor example, we didn\u2019t specify our user-agent in the previous example:\n\n>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)\n\n>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)\n\nNote: Custom headers are given less precedence than more specific sources of information. For instance:\n\nAuthorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.\n\nAuthorization headers will be removed if you get redirected off-host.\n\nProxy-Authorization headers will be overridden by proxy credentials provided in the URL.\n\nContent-Length headers will be overridden when we can determine the length of the content.\n\nFurthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.\n\nNote: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.\n\nMore complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.\n\nTypically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}\n\nThedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:\n\n>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue\n\n>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue\n\nThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.\n\nFor example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:\n\n>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))\n\n>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))\n\nPlease note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).\n\nIf you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:\n\n>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}\n\n>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}\n\n>>>r=requests.post(url,json=payload)\n\n>>>r=requests.post(url,json=payload)\n\nNote, thejsonparameter is ignored if eitherdataorfilesis passed.\n\nPOST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.\n\nRequests makes it simple to upload Multipart-encoded files:\n\n>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\n>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\nYou can set the filename, content_type and headers explicitly:\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\nIf you want, you can send strings to be received as files:\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}\n\nIn the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.\n\nFor sending multiple files in one request refer to theadvancedsection.\n\nWarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.\n\nWarning\n\nIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.\n\nResponse Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.\n\nWe can check the response status code:\n\n>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200\n\n>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200\n\nRequests also comes with a built-in status code lookup object for easy\nreference:\n\n>>>r.status_code==requests.codes.okTrue\n\n>>>r.status_code==requests.codes.okTrue\n\nIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():\n\n>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error\n\n>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error\n\nBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:\n\n>>>r.raise_for_status()None\n\n>>>r.raise_for_status()None\n\nAll is well.\n\nResponse Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.\n\nWe can view the server\u2019s response headers using a Python dictionary:\n\n>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}\n\n>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}\n\nThe dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.\n\nSo, we can access the headers using any capitalization we want:\n\n>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'\n\n>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'\n\nIt is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:\n\nA recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.\n\nA recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.\n\nCookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'\n\nIf a response contains some Cookies, you can quickly access them:\n\n>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'\n\n>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'\n\nTo send your own cookies to the server, you can use thecookiesparameter:\n\n>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'\n\n>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'\n\nCookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:\n\n>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'\n\n>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'\n\nRedirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]\n\nBy default Requests will perform location redirection for all verbs except\nHEAD.\n\nWe can use thehistoryproperty of the Response object to track redirection.\n\nTheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.\n\nFor example, GitHub redirects all HTTP requests to HTTPS:\n\n>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]\n\n>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]\n\nIf you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:\n\n>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]\n\n>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]\n\nIf you\u2019re using HEAD, you can enable redirection as well:\n\n>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]\n\n>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]\n\nTimeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.\n\nYou can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:\n\n>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)\n\n>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)\n\nNotetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.\n\nNote\n\ntimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.\n\nErrors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nIn the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.\n\nResponse.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.\n\nIf a request times out, aTimeoutexception is\nraised.\n\nIf a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.\n\nAll exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.\n\nReady for more? Check out theadvancedsection.\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsRelated TopicsDocumentation overviewPrevious:Installation of RequestsNext:Advanced UsageQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsRelated TopicsDocumentation overviewPrevious:Installation of RequestsNext:Advanced UsageQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.\n\nTable of ContentsQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and Exceptions\n\nRelated TopicsDocumentation overviewPrevious:Installation of RequestsNext:Advanced Usage\n\nQuick search"
  },
  "https://requests.readthedocs.io/en/latest/user/quickstart/#make-a-request": {
    "url": "https://requests.readthedocs.io/en/latest/user/quickstart/#make-a-request",
    "title": "Quickstart \u2014 Requests 2.32.3 documentation",
    "headings": [
      {
        "level": 1,
        "text": "Quickstart\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Make a Request\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Passing Parameters In URLs\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Binary Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "JSON Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Raw Response Content\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Custom Headers\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "More complicated POST requests\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "POST a Multipart-Encoded File\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Response Status Codes\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Response Headers\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Cookies\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Redirection and History\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Timeouts\u00b6",
        "id": ""
      },
      {
        "level": 2,
        "text": "Errors and Exceptions\u00b6",
        "id": ""
      },
      {
        "level": 3,
        "text": "Useful Links",
        "id": ""
      },
      {
        "level": 3,
        "text": "Table of Contents",
        "id": ""
      },
      {
        "level": 3,
        "text": "Related Topics",
        "id": ""
      },
      {
        "level": 3,
        "text": "Quick search",
        "id": "searchlabel"
      }
    ],
    "code_blocks": [
      {
        "language": "unknown",
        "content": ">>>importrequests"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events')"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post('https://httpbin.org/post',data={'key':'value'})"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'"
      },
      {
        "language": "unknown",
        "content": ">>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'"
      },
      {
        "language": "unknown",
        "content": "withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue"
      },
      {
        "language": "unknown",
        "content": ">>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post(url,json=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://httpbin.org/get')>>>r.status_code200"
      },
      {
        "language": "unknown",
        "content": ">>>r.status_code==requests.codes.okTrue"
      },
      {
        "language": "unknown",
        "content": ">>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error"
      },
      {
        "language": "unknown",
        "content": ">>>r.raise_for_status()None"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'"
      },
      {
        "language": "unknown",
        "content": ">>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events')"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post('https://httpbin.org/post',data={'key':'value'})"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'"
      },
      {
        "language": "unknown",
        "content": ">>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))"
      },
      {
        "language": "unknown",
        "content": ">>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/..."
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'"
      },
      {
        "language": "unknown",
        "content": "withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)"
      },
      {
        "language": "unknown",
        "content": ">>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue"
      },
      {
        "language": "unknown",
        "content": ">>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.post(url,json=payload)"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('https://httpbin.org/get')>>>r.status_code200"
      },
      {
        "language": "unknown",
        "content": ">>>r.status_code==requests.codes.okTrue"
      },
      {
        "language": "unknown",
        "content": ">>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error"
      },
      {
        "language": "unknown",
        "content": ">>>r.raise_for_status()None"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}"
      },
      {
        "language": "unknown",
        "content": ">>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'"
      },
      {
        "language": "unknown",
        "content": ">>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'"
      },
      {
        "language": "unknown",
        "content": ">>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]"
      },
      {
        "language": "unknown",
        "content": ">>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]"
      },
      {
        "language": "unknown",
        "content": ">>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)"
      }
    ],
    "toc": [],
    "content": "Quickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nQuickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nQuickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nQuickstart\u00b6Eager to get started? This page gives a good introduction in how to get started\nwith Requests.First, make sure that:Requests isinstalledRequests isup-to-dateLet\u2019s get started with some simple examples.Make a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.Passing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3Response Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.Binary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))JSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.Raw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.Custom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.More complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.POST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.Response Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.Response Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.Cookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'Redirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]Timeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.Errors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nEager to get started? This page gives a good introduction in how to get started\nwith Requests.\n\nFirst, make sure that:\n\nRequests isinstalled\n\nRequests isup-to-date\n\nLet\u2019s get started with some simple examples.\n\nMake a Request\u00b6Making a request with Requests is very simple.Begin by importing the Requests module:>>>importrequestsNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:>>>r=requests.get('https://api.github.com/events')Now, we have aResponseobject calledr. We can\nget all the information we need from this object.Requests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')That\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.\n\nMaking a request with Requests is very simple.\n\nBegin by importing the Requests module:\n\n>>>importrequests\n\n>>>importrequests\n\nNow, let\u2019s try to get a webpage. For this example, let\u2019s get GitHub\u2019s public\ntimeline:\n\n>>>r=requests.get('https://api.github.com/events')\n\n>>>r=requests.get('https://api.github.com/events')\n\nNow, we have aResponseobject calledr. We can\nget all the information we need from this object.\n\nRequests\u2019 simple API means that all forms of HTTP request are as obvious. For\nexample, this is how you make an HTTP POST request:\n\n>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})\n\n>>>r=requests.post('https://httpbin.org/post',data={'key':'value'})\n\nNice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\nOPTIONS? These are all just as simple:\n\n>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')\n\n>>>r=requests.put('https://httpbin.org/put',data={'key':'value'})>>>r=requests.delete('https://httpbin.org/delete')>>>r=requests.head('https://httpbin.org/get')>>>r=requests.options('https://httpbin.org/get')\n\nThat\u2019s all well and good, but it\u2019s also only the start of what Requests can\ndo.\n\nPassing Parameters In URLs\u00b6You often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)You can see that the URL has been correctly encoded by printing the URL:>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1Note that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.You can also pass a list of items as a value:>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3\n\nYou often want to send some sort of data in the URL\u2019s query string. If\nyou were constructing the URL by hand, this data would be given as key/value\npairs in the URL after a question mark, e.g.httpbin.org/get?key=val.\nRequests allows you to provide these arguments as a dictionary of strings,\nusing theparamskeyword argument. As an example, if you wanted to passkey1=value1andkey2=value2tohttpbin.org/get, you would use the\nfollowing code:\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.get('https://httpbin.org/get',params=payload)\n\nYou can see that the URL has been correctly encoded by printing the URL:\n\n>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1\n\n>>>print(r.url)https://httpbin.org/get?key2=value2&key1=value1\n\nNote that any dictionary key whose value isNonewill not be added to the\nURL\u2019s query string.\n\nYou can also pass a list of items as a value:\n\n>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3\n\n>>>payload={'key1':'value1','key2':['value2','value3']}>>>r=requests.get('https://httpbin.org/get',params=payload)>>>print(r.url)https://httpbin.org/get?key1=value1&key2=value2&key2=value3\n\nResponse Content\u00b6We can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Requests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.When you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'If you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.Requests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.\n\nWe can read the content of the server\u2019s response. Consider the GitHub timeline\nagain:\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.text'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\nRequests will automatically decode content from the server. Most unicode\ncharsets are seamlessly decoded.\n\nWhen you make a request, Requests makes educated guesses about the encoding of\nthe response based on the HTTP headers. The text encoding guessed by Requests\nis used when you accessr.text. You can find out what encoding Requests is\nusing, and change it, using ther.encodingproperty:\n\n>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'\n\n>>>r.encoding'utf-8'>>>r.encoding='ISO-8859-1'\n\nIf you change the encoding, Requests will use the new value ofr.encodingwhenever you callr.text. You might want to do this in any situation where\nyou can apply special logic to work out what the encoding of the content will\nbe. For example, HTML and XML have the ability to specify their encoding in\ntheir body. In situations like this, you should user.contentto find the\nencoding, and then setr.encoding. This will let you user.textwith\nthe correct encoding.\n\nRequests will also use custom encodings in the event that you need them. If\nyou have created your own encoding and registered it with thecodecsmodule, you can simply use the codec name as the value ofr.encodingand\nRequests will handle the decoding for you.\n\nBinary Response Content\u00b6You can also access the response body as bytes, for non-text requests:>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...Thegzipanddeflatetransfer-encodings are automatically decoded for you.Thebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.For example, to create an image from binary data returned by a request, you can\nuse the following code:>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))\n\nYou can also access the response body as bytes, for non-text requests:\n\n>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\n>>>r.contentb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n\nThegzipanddeflatetransfer-encodings are automatically decoded for you.\n\nThebrtransfer-encoding is automatically decoded for you if a Brotli library\nlikebrotliorbrotlicffiis installed.\n\nFor example, to create an image from binary data returned by a request, you can\nuse the following code:\n\n>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))\n\n>>>fromPILimportImage>>>fromioimportBytesIO>>>i=Image.open(BytesIO(r.content))\n\nJSON Response Content\u00b6There\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...In case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.It should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.\n\nThere\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data:\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...\n\n>>>importrequests>>>r=requests.get('https://api.github.com/events')>>>r.json()[{'repository': {'open_issues': 0, 'url': 'https://github.com/...\n\nIn case the JSON decoding fails,r.json()raises an exception. For example, if\nthe response gets a 204 (No Content), or if the response contains invalid JSON,\nattemptingr.json()raisesrequests.exceptions.JSONDecodeError. This wrapper exception\nprovides interoperability for multiple exceptions that may be thrown by different\npython versions and json serialization libraries.\n\nIt should be noted that the success of the call tor.json()doesnotindicate the success of the response. Some servers may return a JSON object in a\nfailed response (e.g. error details with HTTP 500). Such JSON will be decoded\nand returned. To check that a request is successful, user.raise_for_status()or checkr.status_codeis what you expect.\n\nRaw Response Content\u00b6In the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'In general, however, you should use a pattern like this to save what is being\nstreamed to a file:withopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)UsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.NoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.\n\nIn the rare case that you\u2019d like to get the raw socket response from the\nserver, you can accessr.raw. If you want to do this, make sure you setstream=Truein your initial request. Once you do, you can do this:\n\n>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'\n\n>>>r=requests.get('https://api.github.com/events',stream=True)>>>r.raw<urllib3.response.HTTPResponse object at 0x101194810>>>>r.raw.read(10)b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'\n\nIn general, however, you should use a pattern like this to save what is being\nstreamed to a file:\n\nwithopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)\n\nwithopen(filename,'wb')asfd:forchunkinr.iter_content(chunk_size=128):fd.write(chunk)\n\nUsingResponse.iter_contentwill handle a lot of what you would otherwise\nhave to handle when usingResponse.rawdirectly. When streaming a\ndownload, the above is the preferred and recommended way to retrieve the\ncontent. Note thatchunk_sizecan be freely adjusted to a number that\nmay better fit your use cases.\n\nNoteAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.\n\nNote\n\nAn important note about usingResponse.iter_contentversusResponse.raw.Response.iter_contentwill automatically decode thegzipanddeflatetransfer-encodings.Response.rawis a raw stream of bytes \u2013 it does not\ntransform the response content.  If you really need access to the bytes as they\nwere returned, useResponse.raw.\n\nCustom Headers\u00b6If you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.For example, we didn\u2019t specify our user-agent in the previous example:>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)Note: Custom headers are given less precedence than more specific sources of information. For instance:Authorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.Authorization headers will be removed if you get redirected off-host.Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.Content-Length headers will be overridden when we can determine the length of the content.Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.Note: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.\n\nIf you\u2019d like to add HTTP headers to a request, simply pass in adictto theheadersparameter.\n\nFor example, we didn\u2019t specify our user-agent in the previous example:\n\n>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)\n\n>>>url='https://api.github.com/some/endpoint'>>>headers={'user-agent':'my-app/0.0.1'}>>>r=requests.get(url,headers=headers)\n\nNote: Custom headers are given less precedence than more specific sources of information. For instance:\n\nAuthorization headers set withheaders=will be overridden if credentials\nare specified in.netrc, which in turn will be overridden by theauth=parameter. Requests will search for the netrc file at~/.netrc,~/_netrc,\nor at the path specified by theNETRCenvironment variable.\n\nAuthorization headers will be removed if you get redirected off-host.\n\nProxy-Authorization headers will be overridden by proxy credentials provided in the URL.\n\nContent-Length headers will be overridden when we can determine the length of the content.\n\nFurthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request.\n\nNote: All header values must be astring, bytestring, or unicode. While permitted, it\u2019s advised to avoid passing unicode header values.\n\nMore complicated POST requests\u00b6Typically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}Thedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrueThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))Please note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).If you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,json=payload)Note, thejsonparameter is ignored if eitherdataorfilesis passed.\n\nTypically, you want to send some form-encoded data \u2014 much like an HTML form.\nTo do this, simply pass a dictionary to thedataargument. Your\ndictionary of data will automatically be form-encoded when the request is made:\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}\n\n>>>payload={'key1':'value1','key2':'value2'}>>>r=requests.post('https://httpbin.org/post',data=payload)>>>print(r.text){...\"form\": {\"key2\": \"value2\",\"key1\": \"value1\"},...}\n\nThedataargument can also have multiple values for each key. This can be\ndone by makingdataeither a list of tuples or a dictionary with lists\nas values. This is particularly useful when the form has multiple elements that\nuse the same key:\n\n>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue\n\n>>>payload_tuples=[('key1','value1'),('key1','value2')]>>>r1=requests.post('https://httpbin.org/post',data=payload_tuples)>>>payload_dict={'key1':['value1','value2']}>>>r2=requests.post('https://httpbin.org/post',data=payload_dict)>>>print(r1.text){...\"form\": {\"key1\": [\"value1\",\"value2\"]},...}>>>r1.text==r2.textTrue\n\nThere are times that you may want to send data that is not form-encoded. If\nyou pass in astringinstead of adict, that data will be posted directly.\n\nFor example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data:\n\n>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))\n\n>>>importjson>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}>>>r=requests.post(url,data=json.dumps(payload))\n\nPlease note that the above code will NOT add theContent-Typeheader\n(so in particular it will NOT set it toapplication/json).\n\nIf you need that header set and you don\u2019t want to encode thedictyourself,\nyou can also pass it directly using thejsonparameter (added in version 2.4.2)\nand it will be encoded automatically:\n\n>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}\n\n>>>url='https://api.github.com/some/endpoint'>>>payload={'some':'data'}\n\n>>>r=requests.post(url,json=payload)\n\n>>>r=requests.post(url,json=payload)\n\nNote, thejsonparameter is ignored if eitherdataorfilesis passed.\n\nPOST a Multipart-Encoded File\u00b6Requests makes it simple to upload Multipart-encoded files:>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}You can set the filename, content_type and headers explicitly:>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}If you want, you can send strings to be received as files:>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}In the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.For sending multiple files in one request refer to theadvancedsection.WarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.\n\nRequests makes it simple to upload Multipart-encoded files:\n\n>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\n>>>url='https://httpbin.org/post'>>>files={'file':open('report.xls','rb')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\nYou can set the filename, content_type and headers explicitly:\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.xls',open('report.xls','rb'),'application/vnd.ms-excel',{'Expires':'0'})}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"<censored...binary...data>\"},...}\n\nIf you want, you can send strings to be received as files:\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}\n\n>>>url='https://httpbin.org/post'>>>files={'file':('report.csv','some,data,to,send\\nanother,row,to,send\\n')}>>>r=requests.post(url,files=files)>>>r.text{...\"files\": {\"file\": \"some,data,to,send\\\\nanother,row,to,send\\\\n\"},...}\n\nIn the event you are posting a very large file as amultipart/form-datarequest, you may want to stream the request. By default,requestsdoes not\nsupport this, but there is a separate package which does -requests-toolbelt. You should readthe toolbelt\u2019s documentationfor more details about how to use it.\n\nFor sending multiple files in one request refer to theadvancedsection.\n\nWarningIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.\n\nWarning\n\nIt is strongly recommended that you open files inbinary\nmode. This is because Requests may attempt to provide\ntheContent-Lengthheader for you, and if it does this value\nwill be set to the number ofbytesin the file. Errors may occur\nif you open the file intext mode.\n\nResponse Status Codes\u00b6We can check the response status code:>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200Requests also comes with a built-in status code lookup object for easy\nreference:>>>r.status_code==requests.codes.okTrueIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client ErrorBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:>>>r.raise_for_status()NoneAll is well.\n\nWe can check the response status code:\n\n>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200\n\n>>>r=requests.get('https://httpbin.org/get')>>>r.status_code200\n\nRequests also comes with a built-in status code lookup object for easy\nreference:\n\n>>>r.status_code==requests.codes.okTrue\n\n>>>r.status_code==requests.codes.okTrue\n\nIf we made a bad request (a 4XX client error or 5XX server error response), we\ncan raise it withResponse.raise_for_status():\n\n>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error\n\n>>>bad_r=requests.get('https://httpbin.org/status/404')>>>bad_r.status_code404>>>bad_r.raise_for_status()Traceback (most recent call last):File\"requests/models.py\", line832, inraise_for_statusraisehttp_errorrequests.exceptions.HTTPError:404 Client Error\n\nBut, since ourstatus_codeforrwas200, when we callraise_for_status()we get:\n\n>>>r.raise_for_status()None\n\n>>>r.raise_for_status()None\n\nAll is well.\n\nResponse Headers\u00b6We can view the server\u2019s response headers using a Python dictionary:>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}The dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.So, we can access the headers using any capitalization we want:>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'It is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:A recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.\n\nWe can view the server\u2019s response headers using a Python dictionary:\n\n>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}\n\n>>>r.headers{'content-encoding': 'gzip','transfer-encoding': 'chunked','connection': 'close','server': 'nginx/1.0.4','x-runtime': '148ms','etag': '\"e1ca502697e5c9317743dc078f67693f\"','content-type': 'application/json'}\n\nThe dictionary is special, though: it\u2019s made just for HTTP headers. According toRFC 7230, HTTP Header names\nare case-insensitive.\n\nSo, we can access the headers using any capitalization we want:\n\n>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'\n\n>>>r.headers['Content-Type']'application/json'>>>r.headers.get('content-type')'application/json'\n\nIt is also special in that the server could have sent the same header multiple\ntimes with different values, but requests combines them so they can be\nrepresented in the dictionary within a single mapping, as perRFC 7230:\n\nA recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.\n\nA recipient MAY combine multiple header fields with the same field name\ninto one \u201cfield-name: field-value\u201d pair, without changing the semantics\nof the message, by appending each subsequent field value to the combined\nfield value in order, separated by a comma.\n\nCookies\u00b6If a response contains some Cookies, you can quickly access them:>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'To send your own cookies to the server, you can use thecookiesparameter:>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'Cookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'\n\nIf a response contains some Cookies, you can quickly access them:\n\n>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'\n\n>>>url='http://example.com/some/cookie/setting/url'>>>r=requests.get(url)>>>r.cookies['example_cookie_name']'example_cookie_value'\n\nTo send your own cookies to the server, you can use thecookiesparameter:\n\n>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'\n\n>>>url='https://httpbin.org/cookies'>>>cookies=dict(cookies_are='working')>>>r=requests.get(url,cookies=cookies)>>>r.text'{\"cookies\": {\"cookies_are\": \"working\"}}'\n\nCookies are returned in aRequestsCookieJar,\nwhich acts like adictbut also offers a more complete interface,\nsuitable for use over multiple domains or paths.  Cookie jars can\nalso be passed in to requests:\n\n>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'\n\n>>>jar=requests.cookies.RequestsCookieJar()>>>jar.set('tasty_cookie','yum',domain='httpbin.org',path='/cookies')>>>jar.set('gross_cookie','blech',domain='httpbin.org',path='/elsewhere')>>>url='https://httpbin.org/cookies'>>>r=requests.get(url,cookies=jar)>>>r.text'{\"cookies\": {\"tasty_cookie\": \"yum\"}}'\n\nRedirection and History\u00b6By default Requests will perform location redirection for all verbs except\nHEAD.We can use thehistoryproperty of the Response object to track redirection.TheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.For example, GitHub redirects all HTTP requests to HTTPS:>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]If you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]If you\u2019re using HEAD, you can enable redirection as well:>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]\n\nBy default Requests will perform location redirection for all verbs except\nHEAD.\n\nWe can use thehistoryproperty of the Response object to track redirection.\n\nTheResponse.historylist contains theResponseobjects that were created in order to\ncomplete the request. The list is sorted from the oldest to the most recent\nresponse.\n\nFor example, GitHub redirects all HTTP requests to HTTPS:\n\n>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]\n\n>>>r=requests.get('http://github.com/')>>>r.url'https://github.com/'>>>r.status_code200>>>r.history[<Response [301]>]\n\nIf you\u2019re using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable\nredirection handling with theallow_redirectsparameter:\n\n>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]\n\n>>>r=requests.get('http://github.com/',allow_redirects=False)>>>r.status_code301>>>r.history[]\n\nIf you\u2019re using HEAD, you can enable redirection as well:\n\n>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]\n\n>>>r=requests.head('http://github.com/',allow_redirects=True)>>>r.url'https://github.com/'>>>r.history[<Response [301]>]\n\nTimeouts\u00b6You can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)Notetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.\n\nYou can tell Requests to stop waiting for a response after a given number of\nseconds with thetimeoutparameter. Nearly all production code should use\nthis parameter in nearly all requests. Failure to do so can cause your program\nto hang indefinitely:\n\n>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)\n\n>>>requests.get('https://github.com/',timeout=0.001)Traceback (most recent call last):File\"<stdin>\", line1, in<module>requests.exceptions.Timeout:HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)\n\nNotetimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.\n\nNote\n\ntimeoutis not a time limit on the entire response download;\nrather, an exception is raised if the server has not issued a\nresponse fortimeoutseconds (more precisely, if no bytes have been\nreceived on the underlying socket fortimeoutseconds). If no timeout is specified explicitly, requests do\nnot time out.\n\nErrors and Exceptions\u00b6In the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.Response.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.If a request times out, aTimeoutexception is\nraised.If a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.All exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.Ready for more? Check out theadvancedsection.\n\nIn the event of a network problem (e.g. DNS failure, refused connection, etc),\nRequests will raise aConnectionErrorexception.\n\nResponse.raise_for_status()will\nraise anHTTPErrorif the HTTP request\nreturned an unsuccessful status code.\n\nIf a request times out, aTimeoutexception is\nraised.\n\nIf a request exceeds the configured number of maximum redirections, aTooManyRedirectsexception is raised.\n\nAll exceptions that Requests explicitly raises inherit fromrequests.exceptions.RequestException.\n\nReady for more? Check out theadvancedsection.\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsRelated TopicsDocumentation overviewPrevious:Installation of RequestsNext:Advanced UsageQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.Useful LinksQuickstartAdvanced UsageAPI ReferenceRelease HistoryContributors GuideRecommended Packages and ExtensionsRequests @ GitHubRequests @ PyPIIssue TrackerTable of ContentsQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and ExceptionsRelated TopicsDocumentation overviewPrevious:Installation of RequestsNext:Advanced UsageQuick search\n\nRequests is an elegant and simple HTTP library for Python, built for\n  human beings. You are currently looking at the documentation of the\n  development release.\n\nTable of ContentsQuickstartMake a RequestPassing Parameters In URLsResponse ContentBinary Response ContentJSON Response ContentRaw Response ContentCustom HeadersMore complicated POST requestsPOST a Multipart-Encoded FileResponse Status CodesResponse HeadersCookiesRedirection and HistoryTimeoutsErrors and Exceptions\n\nRelated TopicsDocumentation overviewPrevious:Installation of RequestsNext:Advanced Usage\n\nQuick search"
  }
}